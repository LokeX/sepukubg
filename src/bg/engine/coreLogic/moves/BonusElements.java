package bg.engine.coreLogic.moves;

import bg.engine.coreLogic.trainer.Trainer;

import java.io.Serializable;
import java.util.Random;

public class BonusElements extends MoveLayout implements Serializable {

  public BonusElements(MoveLayout moveLayout) {

    super(moveLayout);
    if (moveLayout.getPlayerID() == 0) {
      setElements(Trainer.bots.get(useWhiteBot));
    } else {
      setElements(Trainer.bots.get(useBlackBot));
    }
  }

  public BonusElements() {

  }

  public int checkPointsPseudoAdder = 3;//  range 1-4
  public int checkPointsBarPipPow = 3;//  range 2-3
  public int pipModifierTippingPoint = 50;//  range 45-55
  public int pipModifierLowSquare = 2;//  range 1-3
  public int pipModifierHighSquare = 7;//  range 5-8
  public int bGBonusPow = 1;//  range 1-3
  public int bGBonusMultiplier = 236;//  range 5-300
  public int singleBonusMultiplier = 45;//  range 2-40
  public int singleBonusPow = 3;//  range 2-6
  public int reverseBarBonusMultiplier = 1000;//  range 100-10.000

  public int barBonusBarPointModifier = 2;//  range 1-3
  public int barBonusMultiplier = 3;//  range 2-4

  public int BuildAndFlexBonusContactModifierLimit = 15;//  range 3-7
  public int flexBonusMultiplier = 15;//  range 5-50
  public int buildBonusMultiplier = 4;//  range 2-7
  public int buildBonusDivisor = 14;//  range 5-15
  public int BuildAndFlexBonusBarDivisorMulitplier = 2;//  range 1-5
  public int stackBonusMaxContact = 4;//  range 3-6
  public int stackBonusNoContactDivisor = 2;//  range 1-5
  public int runningWildBonusPanicFactor = 1;//  range 1-3
  public int runningWildBonusGammonLoosePercentageFactor1 = 40;//  range 35-44
  public int runningWildBonusGammonLoosePercentageFactor2 = 50;//  range 45-54
  public int runningWildBonusGammonLoosePercentageFactor3 = 60;//  range 55-64
  public int runningWildBonusPrimaryDivisor = 2;//  range 1-3
  public int runningWildBonusSecondaryDivisor = 4;//  range 3-6
  public int runningWildBonusTertiaryDivisor = 6;//  range 4-10
  public int runningBonusFrame = 50;//  range 0-100
  public int noContactBonusTippingPoint = 50;//  range 47-53
  public int noContactBonusTippingPointMultiplier = 1;//  range 1-3
  public int noContactBonusBlockadePow = 1;//  range 1-3
  public int noContactBonusBlockadeMultiplier = 1;//  range 1-3
  public int noContactBonusMultiplier = 100;//  range 50-20
  public int domesticViolencePow = 2;//  range 1-3
  public int domesticViolenceOnTheRunPow = 2;//  range 1-3
  public int domesticViolenceBonusMultiplier = 2;//  range 1-3
  public int domesticViolenceGammonLooseTippingPoint = 40;//  range 30-50
  public int bullsEyeBaseBonus = 10;//  range 5-15
  public int bullsEyeBonusFactor = 5;//  range 2-10
  public int bullsEyePow = 2;//  range 1-3
  public int bullsNosePenaltyMultiplier = 3;//  range 1-6
  public int bullsNosePenaltyPow = 1;//  range 1-2
  public int bullsNosePenaltyPow2 = 1;//  range 1-2
  public int homeComingBonusCheckersQuadrantsAwayMultiplier = 1;//  range 1-2
  public int homeComingBonusRearHomePointMultiplierReducer = -2;//  range 0 - -3
  public int homeComingBonusBonusCounter = 7;//  range 5-9
  public int HomeComingBaseBonus = 10;//  range 5-15
  public int homeComingBonusVacantPointEqualizer = 5;//  range 3-8
  public int checkingOutBonusThreeCheckersLeftBaseBonus = 20;//  range 15-25
  public int checkingOutBonusFourCheckersLeftBaseBonus = 10;//  range 5-15
  public int checkingOutBonusPoint123Multiplier = 10;//  range 5-15
  public int deadFoesBonusMultiplier = 5;//  range 3-12
  public int deadFoesBonusPow = 2;//  range 1-2
  public int deadFoesBonusPipDivisor = 20;//  range 10-40
  public int deadFoesBonusPoint123Multiplier = 25;//  range 15-75
  public int deadFoesBonusPoint123Pow = 4;//  range 4-5
  public int primBonusMultiplier = 19;//  range 15-25
  public int primBonusDivisor = 10;//  range 5-15
  public int primeBonusPointContactMultiplier = 4;//  range 2-7
  public int halfPrimeBonusContactHigh = 4;//  range 3-5
  public int halfPrimeBonusContactModifierModifier = 1;//  range 0 - 2
  public int halfPrimeBonusBarDivisorEqualizer = 10;//  range 5 - 15
  public int halfPrimeBonusBarDivisor = 4;//  range 2 - 7
  public int halfPrimeBonusDivisor = 10;//  range 5 - 20
  public int halfPrimeBonusHomeValue = 7;//  range 5 - 10
  public int halfPrimeBonusAwayValue = 2;//  range 1 - 5
  public int halfPrimeBonusDualTopperDivisor = 5;//  range 3 - 8
  public int potentialHitBonusMultiplier = 11; //  range 8 - 15
  public int potentialHitBonusDivisor = 12; //  range 7 - 17
  public int bestDiceBonusMultiplier = 10;//  range 7 - 14
  public int bestDiceBonusDivisor = 4;//  range 2 - 7
  public int bestDiceBonusMinNrOfBlockades = 3;//  range 2 - 4
  public int backAndKamikazeBonusEnoughFoesAtHome = 11;//  range 9 - 13
  public int kamikazeBonusShortMultiplier = 24;//  range 16 - 40
  public int kamikazeBonusLongMultiplier = 12;//  range 8 - 18
  public int kamikazeBonusShortAdder = 2;//  range 1 - 3
  public int backBonusShortMultiplier = 12;//  range 8 - 18
  public int backBonusShortFewFoesMultiplier = 5;//  range 3 - 8
  public int backBonusShortManyFoesMultiplier = 3;//  range 2 - 4
  public int backBonusShortManyFoesDivisor = 2;//  range 1 - 4
  public int backBonusLongFewFoesMultiplier = 3;//  range 2 - 4
  public int backBonusLongManyFoesMultiplier = 2;//  range 1 - 4
  public int backBonusLongManyFoesDivisor = 2;//  range 1 - 4
  public int backAndKamikazeBonusStackBackBonusLimit = 5;//  range 3 - 7
  public int luckyHoldBaseBonus = 7;//  range 5 - 9
  public int luckyHoldBonusMultiplier = 5;//  range 3 - 7
  public int anchorBonusMultiplier = 100;//  range 30 - 700
  public int anchorBonusPip2Modifier = 6;//  range 4 - 9
  public int anchorBonusPipTippingPoint = 68;//  range 40 - 120
  public int anchorBonusLowSquare = 2;//  range 1 - 3
  public int anchorBonusHighSquare = 8;//  range 7 - 8
  public int anchorBonusPipPow = 2;//  range 1 - 3
  public int reserveBonusDivisor = 10;//  range 7 - 15
  public int midpointBonusMultiplier = 100;//  range 50 - 250
  public int trapBonusMultiplier = 10;//  range 7 - 15
  public int trapBonusDivisor = 12;//  range 8 - 18
  public int trapBonusMaxPipModifier = 8;//  range 6 - 11
  public int trapBonusPipModifierReducer = 0;//  range 0 - 2
  public int squeezeBonusPow = 3;//  range 2 - 4
  public int squeezeBonusContactLimit = 4;//  range 3 - 6
  public int squeezeBonusMultiplier = 2;//  range 1 - 12
  public int squeezeLimit = 4;//  range 3 - 5
  public int potentialHitBonusTurnDivisor = 8;//  range 6 - 11

  public int gammonLoosePercentageModifierMultiplier = 5;
  public int gammonWinPercentageModifierMultiplier = 5;

  public void randomize() {

    Random ran = new Random();

//    checkPointsPseudoAdder = ran.nextInt(3)+2;//  range 2-4
    checkPointsPseudoAdder = 3;//  range 1-4
//    checkPointsBarPipPow = ran.nextInt(2)+2;//  range 2-3
    checkPointsBarPipPow = 3;//  range 2-3
//    pipModifierTippingPoint = ran.nextInt(5)+48;//  range 48-52
    pipModifierTippingPoint = 50;//  range 45-55
//    pipModifierLowSquare = ran.nextInt(3)+1;//  range 1-3
    pipModifierLowSquare = 2;//  range 1-3
//    pipModifierHighSquare = ran.nextInt(4)+5;//  range 5-8
    pipModifierHighSquare = 7;//  range 5-8
//    bGBonusPow = ran.nextInt(3)+1;//  range 1-3
    bGBonusPow = 1;//  range 1-3
//    bGBonusMultiplier = ran.nextInt((60)+1)*5;//  range 5-300
    bGBonusMultiplier = 236;//  range 5-300
//    singleBonusMultiplier = ran.nextInt((20)*2)+1;//  range 2-40
    singleBonusMultiplier = 45;//  range 2-40
//    singleBonusPow = ran.nextInt(5)+2;//  range 2-6
    singleBonusPow = 3;//  range 2-6
//    reverseBarBonusMultiplier = ran.nextInt((100)+1)*100;//  range 100-10.000
    reverseBarBonusMultiplier = 1000;//  range 100-10.000

//    barBonusBarPointModifier = ran.nextInt(3)+1;//  range 1-3
    barBonusBarPointModifier = 2;//  range 1-3
//    barBonusMultiplier = ran.nextInt((10)+1)*20;//  range 20-200
    barBonusMultiplier = 40;//  range 20-200

//    BuildAndFlexBonusContactModifierLimit = ran.nextInt(4)+3;//  range 3-7
    BuildAndFlexBonusContactModifierLimit = 15;//  range 3-7
//    flexBonusMultiplier = ran.nextInt((10)+1)*5;//  range 5-50
    flexBonusMultiplier = 15;//  range 5-50
//    buildBonusMultiplier = ran.nextInt(5)+2;//  range 2-7
    buildBonusMultiplier = 4;//  range 2-7
//    buildBonusDivisor = ran.nextInt(11)+5;//  range 5-15
    buildBonusDivisor = 14;//  range 5-15
//    BuildAndFlexBonusBarDivisorMulitplier = ran.nextInt(5)+1;//  range 1-5
    BuildAndFlexBonusBarDivisorMulitplier = 2;//  range 1-5
//    stackBonusMaxContact = ran.nextInt(4)+3;//  range 3-6
    stackBonusMaxContact = 4;//  range 3-6
//    stackBonusNoContactDivisor = ran.nextInt(5)+1;//  range 1-5
    stackBonusNoContactDivisor = 2;//  range 1-5
//    runningWildBonusPanicFactor = ran.nextInt(3)+1;//  range 1-3
    runningWildBonusPanicFactor = 1;//  range 1-3
//    runningWildBonusGammonLoosePercentageFactor1 = ran.nextInt(10)+35;//  range 35-44
    runningWildBonusGammonLoosePercentageFactor1 = 40;//  range 35-44
//    runningWildBonusGammonLoosePercentageFactor2 = ran.nextInt(10)+45;//  range 45-54
    runningWildBonusGammonLoosePercentageFactor2 = 50;//  range 45-54
//    runningWildBonusGammonLoosePercentageFactor3 = ran.nextInt(10)+55;//  range 55-64
    runningWildBonusGammonLoosePercentageFactor3 = 60;//  range 55-64
//    runningWildBonusPrimaryDivisor = ran.nextInt(3)+1;//  range 1-3
    runningWildBonusPrimaryDivisor = 2;//  range 1-3
//    runningWildBonusSecondaryDivisor = ran.nextInt(3)+3;//  range 3-6
    runningWildBonusSecondaryDivisor = 4;//  range 3-6
//    runningWildBonusTertiaryDivisor = ran.nextInt(7)+4;//  range 4-10
    runningWildBonusTertiaryDivisor = 6;//  range 4-10
//    runningBonusFrame = ran.nextInt(100)+1;//  range 0-100
    runningBonusFrame = 50;//  range 0-100
//    noContactBonusTippingPoint = ran.nextInt(7)+47;//  range 47-53
    noContactBonusTippingPoint = 50;//  range 47-53
//    noContactBonusTippingPointMultiplier = ran.nextInt(3)+1;//  range 1-3
    noContactBonusTippingPointMultiplier = 1;//  range 1-3
//    noContactBonusBlockadePow = ran.nextInt(3)+1;//  range 1-3
    noContactBonusBlockadePow = 1;//  range 1-3
//    noContactBonusBlockadeMultiplier = ran.nextInt(3)+1;//  range 1-3
    noContactBonusBlockadeMultiplier = 1;//  range 1-3
//    noContactBonusMultiplier = ran.nextInt(100)+50;//  range 50-150
    noContactBonusMultiplier = 100;//  range 50-150
//    domesticViolencePow = ran.nextInt(3)+1;//  range 1-3
    domesticViolencePow = 2;//  range 1-3
//    domesticViolenceOnTheRunPow = ran.nextInt(3)+1;//  range 1-3
    domesticViolenceOnTheRunPow = 2;//  range 1-3
//    domesticViolenceBonusMultiplier = ran.nextInt(3)+1;//  range 1-3
    domesticViolenceBonusMultiplier = 2;//  range 1-3
//    domesticViolenceGammonLooseTippingPoint = ran.nextInt((20)+30);//  range 30-50
    domesticViolenceGammonLooseTippingPoint = 40;//  range 30-50
//    bullsEyeBaseBonus = ran.nextInt(10)+5;//  range 5-15
    bullsEyeBaseBonus = 10;//  range 5-15
//    bullsEyeBonusFactor = ran.nextInt(9)+2;//  range 2-10
    bullsEyeBonusFactor = 5;//  range 2-10
//    bullsEyePow = ran.nextInt(3)+1;//  range 1-3
    bullsEyePow = 2;//  range 1-3
//    bullsNosePenaltyMultiplier = ran.nextInt(6)+1;//  range 1-6
    bullsNosePenaltyMultiplier = 3;//  range 1-6
//    bullsNosePenaltyPow = ran.nextInt(2)+1;//  range 1-2
    bullsNosePenaltyPow = 1;//  range 1-2
//    bullsNosePenaltyPow2 = ran.nextInt(2)+1;//  range 1-2
    bullsNosePenaltyPow2 = 1;//  range 1-2
//    homeComingBonusCheckersQuadrantsAwayMultiplier = ran.nextInt(2)+1;//  range 1-2
    homeComingBonusCheckersQuadrantsAwayMultiplier = 1;//  range 1-2
//    homeComingBonusRearHomePointMultiplierReducer = ran.nextInt(4)*-3;//  range 0 - -3
    homeComingBonusRearHomePointMultiplierReducer = -2;//  range 0 - -3
//    homeComingBonusBonusCounter = ran.nextInt(5)+5;//  range 5-9
    homeComingBonusBonusCounter = 7;//  range 5-9
//    HomeComingBaseBonus = ran.nextInt(11)+5;//  range 5-15
    HomeComingBaseBonus = 10;//  range 5-15
//    homeComingBonusVacantPointEqualizer = ran.nextInt(6)+3;//  range 3-8
    homeComingBonusVacantPointEqualizer = 5;//  range 3-8
//    checkingOutBonusThreeCheckersLeftBaseBonus = ran.nextInt(11)+15;//  range 15-25
    checkingOutBonusThreeCheckersLeftBaseBonus = 20;//  range 15-25
//    checkingOutBonusFourCheckersLeftBaseBonus = ran.nextInt(11)+15;//  range 5-15
    checkingOutBonusFourCheckersLeftBaseBonus = 10;//  range 5-15
//    checkingOutBonusPoint123Multiplier = ran.nextInt(11)+15;//  range 5-15
    checkingOutBonusPoint123Multiplier = 10;//  range 5-15
//    deadFoesBonusMultiplier = ran.nextInt(10)+3;//  range 3-12
    deadFoesBonusMultiplier = 5;//  range 3-12
//    deadFoesBonusPow = ran.nextInt(2)+1;//  range 1-2
    deadFoesBonusPow = 2;//  range 1-2
//    deadFoesBonusPipDivisor = ran.nextInt(30)+10;//  range 10-40
    deadFoesBonusPipDivisor = 20;//  range 10-40
//    deadFoesBonusPoint123Multiplier = ran.nextInt(60)+15;//  range 15-75
    deadFoesBonusPoint123Multiplier = 25;//  range 15-75
//    deadFoesBonusPoint123Pow = ran.nextInt(2)+4;//  range 4-5
    deadFoesBonusPoint123Pow = 4;//  range 4-5
//    primBonusMultiplier = ran.nextInt(11)+15;//  range 15-25
    primBonusMultiplier = 19;//  range 15-25
//    primBonusDivisor = ran.nextInt(11)+5;//  range 5-15
    primBonusDivisor = 10;//  range 5-15
//    primeBonusPointContactMultiplier = ran.nextInt(6)+2;//  range 2-7
    primeBonusPointContactMultiplier = 4;//  range 2-7
//    halfPrimeBonusContactHigh = ran.nextInt(3)+3;//  range 3-5
    halfPrimeBonusContactHigh = 4;//  range 3-5
//    halfPrimeBonusContactModifierModifier = ran.nextInt(3);//  range 0 - 2
    halfPrimeBonusContactModifierModifier = 1;//  range 0 - 2
//    halfPrimeBonusBarDivisorEqualizer = ran.nextInt(11)+5;//  range 5 - 15
    halfPrimeBonusBarDivisorEqualizer = 10;//  range 5 - 15
//    halfPrimeBonusBarDivisor = ran.nextInt(6)+2;//  range 2 - 7
    halfPrimeBonusBarDivisor = 4;//  range 2 - 7
//    halfPrimeBonusDivisor = ran.nextInt(16)+5;//  range 5 - 20
    halfPrimeBonusDivisor = 10;//  range 5 - 20
//    halfPrimeBonusHomeValue = ran.nextInt(6)+5;//  range 5 - 10
    halfPrimeBonusHomeValue = 7;//  range 5 - 10
//    halfPrimeBonusAwayValue = ran.nextInt(5)+1;//  range 1 - 5
    halfPrimeBonusAwayValue = 2;//  range 1 - 5
//    halfPrimeBonusDualTopperDivisor = ran.nextInt(6)+3;//  range 3 - 8
    halfPrimeBonusDualTopperDivisor = 5;//  range 3 - 8
//    potentialHitBonusMultiplier = ran.nextInt(8)+8; //  range 8 - 15
    potentialHitBonusMultiplier = 11; //  range 8 - 15
//    potentialHitBonusDivisor = ran.nextInt(11)+7; //  range 7 - 17
    potentialHitBonusDivisor = 12; //  range 7 - 17
//    bestDiceBonusMultiplier = ran.nextInt(8)+7;//  range 7 - 14
    bestDiceBonusMultiplier = 10;//  range 7 - 14
//    bestDiceBonusDivisor = ran.nextInt(6)+2;//  range 2 - 7
    bestDiceBonusDivisor = 4;//  range 2 - 7
//    bestDiceBonusMinNrOfBlockades = ran.nextInt(3)+2;//  range 2 - 4
    bestDiceBonusMinNrOfBlockades = 3;//  range 2 - 4
//    backAndKamikazeBonusEnoughFoesAtHome = ran.nextInt(5)+9;//  range 9 - 13
    backAndKamikazeBonusEnoughFoesAtHome = 11;//  range 9 - 13
//    kamikazeBonusShortMultiplier = ran.nextInt(25)+16;//  range 16 - 40
    kamikazeBonusShortMultiplier = 24;//  range 16 - 40
//    kamikazeBonusLongMultiplier = ran.nextInt(11)+8;//  range 8 - 18
    kamikazeBonusLongMultiplier = 12;//  range 8 - 18
//    kamikazeBonusShortAdder = ran.nextInt(3)+1;//  range 1 - 3
    kamikazeBonusShortAdder = 2;//  range 1 - 3
//    backBonusShortMultiplier = ran.nextInt(11)+8;//  range 8 - 18
    backBonusShortMultiplier = 12;//  range 8 - 18
//    backBonusShortFewFoesMultiplier = ran.nextInt(6)+3;//  range 3 - 8
    backBonusShortFewFoesMultiplier = 5;//  range 3 - 8
//    backBonusShortManyFoesMultiplier = ran.nextInt(3)+2;//  range 2 - 4
    backBonusShortManyFoesMultiplier = 3;//  range 2 - 4
//    backBonusShortManyFoesDivisor = ran.nextInt(4)+1;//  range 1 - 4
    backBonusShortManyFoesDivisor = 2;//  range 1 - 4
//    backBonusLongFewFoesMultiplier = ran.nextInt(3)+2;//  range 2 - 4
    backBonusLongFewFoesMultiplier = 3;//  range 2 - 4
//    backBonusLongManyFoesMultiplier = ran.nextInt(4)+1;//  range 1 - 4
    backBonusLongManyFoesMultiplier = 2;//  range 1 - 4
//    backBonusLongManyFoesDivisor = ran.nextInt(4)+1;//  range 1 - 4
    backBonusLongManyFoesDivisor = 2;//  range 1 - 4
//    backAndKamikazeBonusStackBackBonusLimit = ran.nextInt(5)+3;//  range 3 - 7
    backAndKamikazeBonusStackBackBonusLimit = 5;//  range 3 - 7
//    luckyHoldBaseBonus = ran.nextInt(5)+5;//  range 5 - 9
    luckyHoldBaseBonus = 7;//  range 5 - 9
//    luckyHoldBonusMultiplier = ran.nextInt(5)+3;//  range 3 - 7
    luckyHoldBonusMultiplier = 5;//  range 3 - 7
//    anchorBonusMultiplier = ran.nextInt((68)+3)*10;//  range 30 - 700
    anchorBonusMultiplier = 100;//  range 30 - 700
//    anchorBonusPip2Modifier = ran.nextInt(6)+4;//  range 4 - 9
    anchorBonusPip2Modifier = 6;//  range 4 - 9
//    anchorBonusPipTippingPoint = ran.nextInt(80)+40;//  range 40 - 120
    anchorBonusPipTippingPoint = 68;//  range 40 - 120
//    anchorBonusLowSquare = ran.nextInt(3)+1;//  range 1 - 3
    anchorBonusLowSquare = 2;//  range 1 - 3
//    anchorBonusHighSquare = ran.nextInt(2)+7;//  range 7 - 8
    anchorBonusHighSquare = 8;//  range 7 - 8
//    anchorBonusPipPow = ran.nextInt(3)+1;//  range 1 - 3
    anchorBonusPipPow = 2;//  range 1 - 3
//    reserveBonusDivisor = ran.nextInt(9)+7;//  range 7 - 15
    reserveBonusDivisor = 10;//  range 7 - 15
//    midpointBonusMultiplier = ran.nextInt((21)+5)*10;//  range 50 - 250
    midpointBonusMultiplier = 100;//  range 50 - 250
//    trapBonusMultiplier = ran.nextInt(9)+7;//  range 7 - 15
    trapBonusMultiplier = 10;//  range 7 - 15
//    trapBonusDivisor = ran.nextInt(11)+8;//  range 8 - 18
    trapBonusDivisor = 12;//  range 8 - 18
//    trapBonusMaxPipModifier = ran.nextInt(6)+6;//  range 6 - 11
    trapBonusMaxPipModifier = 8;//  range 6 - 11
//    trapBonusPipModifierReducer = ran.nextInt(3);//  range 0 - 2
    trapBonusPipModifierReducer = 0;//  range 0 - 2
//    squeezeBonusPow = ran.nextInt(3)+2;//  range 2 - 4
    squeezeBonusPow = 3;//  range 2 - 4
//    squeezeBonusContactLimit = ran.nextInt(4)+3;//  range 3 - 6
    squeezeBonusContactLimit = 4;//  range 3 - 6
//    squeezeBonusMultiplier = ran.nextInt(12)+1;//  range 1 - 12
    squeezeBonusMultiplier = 2;//  range 1 - 12
//    squeezeLimit = ran.nextInt(3)+3;//  range 3 - 5
    squeezeLimit = 4;//  range 3 - 5
//    potentialHitBonusTurnDivisor = ran.nextInt(6)+6;//  range 6 - 11
    potentialHitBonusTurnDivisor = 8;//  range 6 - 11

  }

  public void setElements (BonusElements elements) {


    checkPointsPseudoAdder = elements.checkPointsPseudoAdder;//  range 1-4
    checkPointsBarPipPow = elements.checkPointsBarPipPow;
    pipModifierTippingPoint = elements.pipModifierTippingPoint;
    pipModifierLowSquare = elements.pipModifierLowSquare;
    pipModifierHighSquare = elements.pipModifierHighSquare;
    bGBonusPow = elements.bGBonusPow;
    bGBonusMultiplier = elements.bGBonusMultiplier;
    singleBonusMultiplier = elements.singleBonusMultiplier;
    singleBonusPow = elements.singleBonusPow;
    reverseBarBonusMultiplier = elements.reverseBarBonusMultiplier;
    barBonusBarPointModifier = elements.barBonusBarPointModifier;
    barBonusMultiplier = elements.barBonusMultiplier;
    BuildAndFlexBonusContactModifierLimit = elements.BuildAndFlexBonusContactModifierLimit;
    flexBonusMultiplier = elements.flexBonusMultiplier;
    buildBonusMultiplier = elements.buildBonusMultiplier;
    buildBonusDivisor = elements.buildBonusDivisor;
    BuildAndFlexBonusBarDivisorMulitplier = elements.BuildAndFlexBonusBarDivisorMulitplier;
    stackBonusMaxContact = elements.stackBonusMaxContact;
    stackBonusNoContactDivisor = elements.stackBonusNoContactDivisor;
    runningWildBonusPanicFactor = elements.runningWildBonusPanicFactor;
    runningWildBonusGammonLoosePercentageFactor1 = elements.runningWildBonusGammonLoosePercentageFactor1;
    runningWildBonusGammonLoosePercentageFactor2 = elements.runningWildBonusGammonLoosePercentageFactor2;
    runningWildBonusGammonLoosePercentageFactor3 = elements.runningWildBonusGammonLoosePercentageFactor3;
    runningWildBonusPrimaryDivisor = elements.runningWildBonusPrimaryDivisor;
    runningWildBonusSecondaryDivisor = elements.runningWildBonusSecondaryDivisor;
    runningWildBonusTertiaryDivisor = elements.runningWildBonusTertiaryDivisor;
    runningBonusFrame = elements.runningBonusFrame;
    noContactBonusTippingPoint = elements.noContactBonusTippingPoint;
    noContactBonusTippingPointMultiplier = elements.noContactBonusTippingPointMultiplier;
    noContactBonusBlockadePow = elements.noContactBonusBlockadePow;
    noContactBonusBlockadeMultiplier = elements.noContactBonusBlockadeMultiplier;
    noContactBonusMultiplier = elements.noContactBonusMultiplier;
    domesticViolencePow = elements.domesticViolencePow;
    domesticViolenceOnTheRunPow = elements.domesticViolenceOnTheRunPow;
    domesticViolenceBonusMultiplier = elements.domesticViolenceBonusMultiplier;
    domesticViolenceGammonLooseTippingPoint = elements.domesticViolenceGammonLooseTippingPoint;
    bullsEyeBaseBonus = elements.bullsEyeBaseBonus;
    bullsEyeBonusFactor = elements.bullsEyeBonusFactor;
    bullsEyePow = elements.bullsEyePow;
    bullsNosePenaltyMultiplier = elements.bullsNosePenaltyMultiplier;
    bullsNosePenaltyPow = elements.bullsNosePenaltyPow;
    bullsNosePenaltyPow2 = elements.bullsNosePenaltyPow2;
    homeComingBonusCheckersQuadrantsAwayMultiplier = elements.homeComingBonusCheckersQuadrantsAwayMultiplier;
    homeComingBonusRearHomePointMultiplierReducer = elements.homeComingBonusRearHomePointMultiplierReducer;
    homeComingBonusBonusCounter = elements.homeComingBonusBonusCounter;
    HomeComingBaseBonus = elements.HomeComingBaseBonus;
    homeComingBonusVacantPointEqualizer = elements.homeComingBonusVacantPointEqualizer;
    checkingOutBonusThreeCheckersLeftBaseBonus = elements.checkingOutBonusThreeCheckersLeftBaseBonus;
    checkingOutBonusFourCheckersLeftBaseBonus = elements.checkingOutBonusFourCheckersLeftBaseBonus;
    checkingOutBonusPoint123Multiplier = elements.checkingOutBonusPoint123Multiplier;
    deadFoesBonusMultiplier = elements.deadFoesBonusMultiplier;
    deadFoesBonusPow = elements.deadFoesBonusPow;
    deadFoesBonusPipDivisor = elements.deadFoesBonusPipDivisor;
    deadFoesBonusPoint123Multiplier = elements.deadFoesBonusPoint123Multiplier;
    deadFoesBonusPoint123Pow = elements.deadFoesBonusPoint123Pow;
    primBonusMultiplier = elements.primBonusMultiplier;
    primBonusDivisor = elements.primBonusDivisor;
    primeBonusPointContactMultiplier = elements.primeBonusPointContactMultiplier;
    halfPrimeBonusContactHigh = elements.halfPrimeBonusContactHigh;
    halfPrimeBonusContactModifierModifier = elements.halfPrimeBonusContactModifierModifier;
    halfPrimeBonusBarDivisorEqualizer = elements.halfPrimeBonusBarDivisorEqualizer;
    halfPrimeBonusBarDivisor = elements.halfPrimeBonusBarDivisor;
    halfPrimeBonusDivisor = elements.halfPrimeBonusDivisor;
    halfPrimeBonusHomeValue = elements.halfPrimeBonusHomeValue;
    halfPrimeBonusAwayValue = elements.halfPrimeBonusAwayValue;
    halfPrimeBonusDualTopperDivisor = elements.halfPrimeBonusDualTopperDivisor;
    potentialHitBonusMultiplier = elements.potentialHitBonusMultiplier;
    potentialHitBonusDivisor = elements.potentialHitBonusDivisor;
    bestDiceBonusMultiplier = elements.bestDiceBonusMultiplier;
    bestDiceBonusDivisor = elements.bestDiceBonusDivisor;
    bestDiceBonusMinNrOfBlockades = elements.bestDiceBonusMinNrOfBlockades;
    backAndKamikazeBonusEnoughFoesAtHome = elements.backAndKamikazeBonusEnoughFoesAtHome;
    kamikazeBonusShortMultiplier = elements.kamikazeBonusShortMultiplier;
    kamikazeBonusLongMultiplier = elements.kamikazeBonusLongMultiplier;
    kamikazeBonusShortAdder = elements.kamikazeBonusShortAdder;
    backBonusShortMultiplier = elements.backBonusShortMultiplier;
    backBonusShortFewFoesMultiplier = elements.backBonusShortFewFoesMultiplier;
    backBonusShortManyFoesMultiplier = elements.backBonusShortManyFoesMultiplier;
    backBonusShortManyFoesDivisor = elements.backBonusShortManyFoesDivisor;
    backBonusLongFewFoesMultiplier = elements.backBonusLongFewFoesMultiplier;
    backBonusLongManyFoesMultiplier = elements.backBonusLongManyFoesMultiplier;
    backBonusLongManyFoesDivisor = elements.backBonusLongManyFoesDivisor;
    backAndKamikazeBonusStackBackBonusLimit = elements.backAndKamikazeBonusStackBackBonusLimit;
    luckyHoldBaseBonus = elements.luckyHoldBaseBonus;
    luckyHoldBonusMultiplier = elements.luckyHoldBonusMultiplier;
    anchorBonusMultiplier = elements.anchorBonusMultiplier;
    anchorBonusPip2Modifier = elements.anchorBonusPip2Modifier;
    anchorBonusPipTippingPoint = elements.anchorBonusPipTippingPoint;
    anchorBonusLowSquare = elements.anchorBonusLowSquare;
    anchorBonusHighSquare = elements.anchorBonusHighSquare;
    anchorBonusPipPow = elements.anchorBonusPipPow;
    reserveBonusDivisor = elements.reserveBonusDivisor;
    midpointBonusMultiplier = elements.midpointBonusMultiplier;
    trapBonusMultiplier = elements.trapBonusMultiplier;
    trapBonusDivisor = elements.trapBonusDivisor;
    trapBonusMaxPipModifier = elements.trapBonusMaxPipModifier;
    trapBonusPipModifierReducer = elements.trapBonusPipModifierReducer;
    squeezeBonusPow = elements.squeezeBonusPow;
    squeezeBonusContactLimit = elements.squeezeBonusContactLimit;
    squeezeBonusMultiplier = elements.squeezeBonusMultiplier;
    squeezeLimit = elements.squeezeLimit;
    potentialHitBonusTurnDivisor = elements.potentialHitBonusTurnDivisor;

  }


}
